"""
Django settings for project_image_processing project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Base directory of the project, useful for building file paths
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-mff78#)o%n_$49+cj7yh1xu()j+t2e(vsxw1g_-&4+nb*qofag'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG should be set to False when deploying to production
DEBUG = True

# Hosts that are allowed to connect to the Django app. 
# For production, you should define a list of trusted domains here.
ALLOWED_HOSTS = ['.herokuapp.com']  # Allow any subdomain of herokuapp.com to be accessible

# Application definition: the list of installed Django apps
INSTALLED_APPS = [
    'django.contrib.admin',   # Django admin app
    'django.contrib.auth',    # Authentication system
    'django.contrib.contenttypes',  # Content type framework
    'django.contrib.sessions',   # Session management
    'django.contrib.messages',   # Message framework
    'django.contrib.staticfiles',  # Static files management
    'app_image_processing',   # Your custom app (image processing)
]

# Middleware: a list of middleware components that process requests/responses
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',  # Cross-site request forgery protection
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Clickjacking protection
]

# The URL configuration for the project
ROOT_URLCONF = 'project_image_processing.urls'

# Templates settings, where Django looks for HTML templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # You can add directories here for template locations
        'APP_DIRS': True,  # Tells Django to look for templates in app directories
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',  # Debug info in templates
                'django.template.context_processors.request',  # Request context
                'django.contrib.auth.context_processors.auth',  # User authentication context
                'django.contrib.messages.context_processors.messages',  # Messages framework context
            ],
        },
    },
]

# WSGI application configuration for running Django with WSGI servers like Gunicorn
WSGI_APPLICATION = 'project_image_processing.wsgi.application'

# Database configuration
# For development, Django uses SQLite by default, which is fine for testing.
# For production, you'll likely want to switch to a more robust database like PostgreSQL or MySQL.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  # SQLite backend
        'NAME': BASE_DIR / 'db.sqlite3',  # The path to the SQLite database
    }
}

# Password validation settings for ensuring secure password creation
# These validators are applied during user creation and password changes
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Localization settings: controls language and timezone
LANGUAGE_CODE = 'en-us'  # Set to your desired language code, e.g., 'es' for Spanish
TIME_ZONE = 'UTC'  # Set to your local timezone, e.g., 'America/New_York'
USE_I18N = True  # Enable internationalization (translations)
USE_TZ = True  # Enable timezone support

# Static root for Heroku deployment
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Directory where static files will be collected

# Static files settings (CSS, JavaScript, Images)
# Django uses this setting to manage static files during development and production
STATIC_URL = '/static/'  # URL to access static files (e.g., /static/styles.css)

# Configure static files storage for production
# This ensures that static files are properly handled in production
if not DEBUG:
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'  # Use hashed filenames in production

# Default primary key field type for models
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'  # Newer versions of Django use BigAutoField by default

# Multimedia file settings (for user-uploaded files, like images)
# These settings control where uploaded files will be stored on the server
MEDIA_URL = '/media/'  # URL to access media files (e.g., /media/uploads/image.jpg)
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # Directory to store media files on the server
